/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * JavaCC file
 * This file lists the grammar for Hama Expression.
 * HamaExpressionParser program ouputs a ParseTree given a Valid Hama Expression.
 */
options {
  // Generate non-static functions
  STATIC = false;
  // Case is ignored in keywords
  IGNORE_CASE = true;
}

PARSER_BEGIN(HamaExpressionParser)

package org.apache.hama.shell.parser.expression;

import java.io.*;

import org.apache.hama.HamaConfiguration;
import org.apache.hama.shell.HamaShellEnv;
import org.apache.hama.shell.execution.HamaExpression;
import org.apache.hama.shell.execution.EvalExpression;
import org.apache.hama.shell.execution.SaveExpression;
import org.apache.hama.shell.execution.AlgebraOperation;
import org.apache.hama.shell.execution.HamaOperation;
import org.apache.hama.shell.execution.LoadOperation;
import org.apache.hama.shell.execution.RandMatrixOperation;
import org.apache.hama.shell.execution.AlgebraOperator;

/** An Expression Grammar. */
public class HamaExpressionParser {

  private HamaShellEnv shellEnv;
  private HamaConfiguration conf;
  
  public HamaExpressionParser(InputStream in, HamaShellEnv env, HamaConfiguration conf) {
  	this(in);
  	this.shellEnv = env;
  	this.conf = conf;
  }
  
}

PARSER_END(HamaExpressionParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

// List all the keywords in HAMA SHELL
TOKEN : { <LOAD : "load"> }
TOKEN : { <SAVE : "save"> }
TOKEN : { <USING : "using"> }
TOKEN : { <AS : "as"> }
TOKEN : { <TYPE : "matrix"> }
TOKEN : { <MAP : "map"> }
TOKEN : { <REDUCE : "reduce"> }
TOKEN : { <ADDOP : "+" | "-"> }
TOKEN : { <MULOP : "*"> }
TOKEN : { <RANDOMMATRIX : "Matrix.Random"> }

TOKEN:
{
 	<#LETTER : ["a"-"z", "A"-"Z"] >
|	<#DIGIT : ["0"-"9"] >
|   <#SPECIALCHAR : ["_"] >
|   <#FSSPECIALCHAR: ["-", ":", "/"]>
|	<IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> | <SPECIALCHAR> )* >
}
// Define Numeric Constants
TOKEN :
{
 	< INTEGER: ( <DIGIT> )+ >
|	< NUMBER: ([ "-","+"])? <FLOAT> | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?>
| 	< #FLOAT: <INTEGER> ( "." <INTEGER> )? | "." <INTEGER> >
}

TOKEN : { <QUOTEDSTRING :  "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'"] )
          )
        | ("\\u"
            ["0"-"9","A"-"F","a"-"f"]
            ["0"-"9","A"-"F","a"-"f"]
            ["0"-"9","A"-"F","a"-"f"]
	         ["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "'"> }

/** Main production. */
HamaExpression Start() : {HamaExpression expression = null;}
{
  try {
  ( expression = Expression() ";" )
  } catch (TokenMgrError e) {
  	System.err.println(e.toString());
	// skip all the left tokens when an TokenMgrError happened.
	// it is a tricky.  maybe not good enough.
	Token t;
  	do {
      t = getNextToken();
    } while (t!=null);
  	
  	expression = null;
  } catch (ParseException pe) {
  	System.err.println(pe.toString());
  	
  	expression = null;
  }
  finally { 
  	return expression; 
  }
}

/** An Expression. */
HamaExpression Expression() : {boolean isMapNumSet = false; boolean isReduceNumSet = false; HamaExpression expression = null; Token t1, t2, t3; Object value; String filename; HamaOperation operation;}
{
  (
  ( t3=<IDENTIFIER> "=" operation=BasicOperation() 
  	[ <MAP> t1=<INTEGER>
  	  {
  	  	operation.setNumMapTasks(Integer.valueOf(t1.image));
  	  	isMapNumSet = true;
  	  } 
  	] 
  	[ <REDUCE> t2=<INTEGER>
  	  {
  	  	operation.setNumReduceTasks(Integer.valueOf(t2.image));
  	  	isReduceNumSet = true;
  	  } 
  	] 
  ) 
  { 
  	if(!isMapNumSet)
  	  operation.setNumMapTasks(HamaShellEnv.DEFAULT_MAP_NUM);
  	if(!isReduceNumSet)
  	  operation.setNumReduceTasks(HamaShellEnv.DEFAULT_REDUCE_NUM);
  	expression = new EvalExpression(conf, shellEnv, t3.image, operation); 
  } 
  | 
  ( <SAVE> value=AliaseName() <AS> filename=FileName() ) 
  { expression = new SaveExpression(conf, shellEnv, value, filename); }
  )
  { return expression; }
}

/** An Basic Operation. */
HamaOperation BasicOperation() : {HamaOperation operation;}
{
  (
  operation=AlgebraOp()
  | 
  operation=LoadOp()
  |
  operation=RandMatrixOp()
  )
  { return operation; }
}

/** A Load Operation. */
HamaOperation LoadOp() : {String filename; String typename; String classname;}
{
  ( <LOAD> filename=FileName() <AS> typename=TypeName() <USING> classname=ClassName() )
  { return new LoadOperation(conf, filename, typename, classname); }
}

/** A RandomMatrix Generation Operation. */
HamaOperation RandMatrixOp() : { Token t1, t2; }
{
  ( <RANDOMMATRIX> t1=<INTEGER> t2=<INTEGER> )
  {
  	return new RandMatrixOperation(conf, Integer.valueOf(t1.image), Integer.valueOf(t2.image));
  }
}

/** An Operation Operation. */
HamaOperation AlgebraOp() : {AlgebraOperator op;}
{
  op = AdditiveOp()
  { 
	return new AlgebraOperation(conf, op);
  } 
}

/** An Additive Operation. */
AlgebraOperator AdditiveOp() : {AlgebraOperator op, op1, op2; Token t;}
{
  ( op1=MultiplicativeOp() { op = new AlgebraOperator(op1, shellEnv); } ( ( t=<ADDOP> op2=MultiplicativeOp() ){ op.addOpAndOperand(t.image, op2); } )* )
  { 
  	return op; 
  }
}

/** A Multiplicative Operation. */
AlgebraOperator MultiplicativeOp() : {AlgebraOperator op, op1, op2; Token t;}
{
  ( op1=UnaryOp() { op = new AlgebraOperator(op1, shellEnv); } ( ( t=<MULOP> op2=UnaryOp() ){op.addOpAndOperand(t.image, op2);} )* )
  {
  	return op;
  }
}

/** A Unary Operation. */
AlgebraOperator UnaryOp() : {AlgebraOperator op; Object b;}
{
  (
  ( "(" op=AdditiveOp() ")" ) 
  | 
  b = AliaseName() { op = new AlgebraOperator(b, shellEnv); }
  )
  {
  	return op;
  }
}

// A reference to an alias
Object AliaseName() : {Token t; Object value;}
{
  t=<IDENTIFIER>
  { 
	String alias = t.image;
	
	value = shellEnv.getAliase(alias);
	if ((value = shellEnv.getAliase(alias)) == null) {
		StringBuilder msg = new StringBuilder();
		msg.append("Unable to find alias: '");
		msg.append(alias);
		msg.append("' - Hama Shell Aliases: '");
		for (String tmpAlias : shellEnv.getAliases().keySet()) {
			msg.append(tmpAlias);
			msg.append(",");
		}
		msg.append("'");
		throw new ParseException(msg.toString());
	}
	
	return value;
  }
}

/** A Typename. */
String TypeName() : {Token t;}
{
  t=<TYPE>
  {
  	return t.image; 
  }
}

/** A Filename. */
String FileName() : {Token t; String filename;}
{
  t=<QUOTEDSTRING>
  { 
  	filename=t.image.substring(t.image.indexOf("'") + 1, t.image.lastIndexOf("'"));
  	return filename; 
  }
}

/** A ClassName. */
String ClassName() : {Token t; String classname;}
{
  t=<QUOTEDSTRING>
  {
  	classname=t.image.substring(t.image.indexOf("'") + 1, t.image.lastIndexOf("'"));
  	return classname; 
  }
}

/** A Constant. */
Double Constant() : {Token t;}
{
  (
  t=<INTEGER>
  |
  t=<NUMBER>
  )
  {
  	return Double.valueOf(t.image);
  }
}